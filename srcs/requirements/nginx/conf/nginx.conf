# This file will tell NGINX:
# - What ports to listen to for incoming connections,
# - What SSL certificates to use, and which protocols to use, 1.2 and 1.3.
# - How to handle requests for files and directories, and how to handle .php files.

server
{
	listen      443 ssl;	# Listen to any IPv4 address on port 443
	listen [::]:443 ssl;	# Listen to any IPv6 address on port 443

	server_name fsalazar.42.fr; # The domain name of the server which will be used to access it

	ssl on; # Enable SSL (TLS) encryption
	ssl_protocols TLSv1.2 TLSv1.3; # Use TLS 1.2 and 1.3. TLS 1.3 is the latest version of TLS and is more secure than TLS 1.2.
	ssl_certificate     /etc/ssl/fsalazar.42.fr.crt; # The SSL certificate file
	ssl_certificate_key /etc/ssl/fsalazar.42.fr.key; # The SSL certificate key file

	# The root directive specifies the directory from which to serve files.
	# The index directive specifies the file that will be served if a directory is requested.
	# The autoindex directive enables directory listing.
	root /var/www/html/wordpress;
	index index.php index.html index.htm index.nginx-debian.html;
	autoindex on;

	# Requests for files and directories that exist should be served directly from the filesystem.
	# If a file or directory doesn't exist, pass the request to WordPress. WordPress will handle
	# requests for pretty permalinks and for URLs ending with .php.
	# Otherwise return a 404 Not Found error.
	location /
	{
		try_files $uri $uri/ = 404; # Return 404 Not Found error if file or directory doesn't exist.
	}

	# We use a FastCGI server to handle PHP requests. The FastCGI server is running in a separate
	# container called wordpress. The FastCGI server is listening on port 9000.

	# .php files are scripts that we can't handle directly. FastCGI can handle
	# these, so pass all .php files to FastCGI server.
	location ~ \.php$
	{
		include snippets/fastcgi-php.conf;	# Include the FastCGI configuration file
		#include fastcgi_params;
		fastcgi_pass wordpress:9000;		# Pass the request to the FastCGI server
	}

	# Deny access to .htaccess files, if Apache's document root concurs with nginx's one
	# This prevents the possibility of accessing .htaccess files from the web.
	location ~ /\.ht
	{
		deny all;
	}
}
